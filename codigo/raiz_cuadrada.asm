.include "m328pdef.inc"

.DEF CUADRADO_4toBYTE = R2
.DEF CUADRADO_3erBYTE = R3
.DEF CUADRADO_2doBYTE = R4
.DEF CUADRADO_1erBYTE = R5
.DEF RESTO_4 = R6
.DEF RESTO_3 = R7
.DEF RESTO_2 = R8
.DEF RESTO_1 = R9
.DEF CONT_RL = R10
.DEF CONT_ITERACIONES = R11
.DEF DIVIS_4 = R12
.DEF DIVIS_3 = R13
.DEF DIVIS_2 = R14
.DEF DIVIS_1 = R15
.DEF TEMP = R16
.DEF INIT_CUADRADO_4toBYTE = R18
.DEF INIT_CUADRADO_3erBYTE = R19
.DEF INIT_CUADRADO_2doBYTE = R20
.DEF INIT_CUADRADO_1erBYTE = R21
.DEF RESUL_4 = R22
.DEF RESUL_3 = R23
.DEF RESUL_2 = R24
.DEF RESUL_1 = R25
.DEF DIVID_4 = R22
.DEF DIVID_3 = R23
.DEF DIVID_2 = R24
.DEF DIVID_1 = R25


.EQU CANT_ITERACIONES = 5
.EQU FALTA_RESTA_4toBYTE = 2
.EQU FALTA_RESTA_3erBYTE = 1
.EQU FALTA_RESTA_2doBYTE = 0



RAIZ_CUADRADA:
	CLR RESTO_4
	CLR RESTO_3
	CLR RESTO_2
	CLR RESTO_1
	CLR CONT_RL
	CLR CONT_ITERACIONES
	CLR DIVIS_4
	CLR DIVIS_3
	CLR DIVIS_2
	CLR DIVIS_1
	CLR TEMP
	CLR INIT_CUADRADO_4toBYTE
	CLR INIT_CUADRADO_3erBYTE
	CLR INIT_CUADRADO_2doBYTE
	CLR INIT_CUADRADO_1erBYTE
	CLR RESUL_4
	CLR RESUL_3
	CLR RESUL_2
	CLR RESUL_1
	CLR DIVID_4
	CLR DIVID_3
	CLR DIVID_2
	CLR DIVID_1
	LDI TEMP,CANT_ITERACIONES
	MOV CONT_ITERACIONES,TEMP;CARGO LA CANTIDAD DE ITERACIONES

;INICIALIZO LA RAIZ SEGUN EL TAMAÑO DEL CUADRADO
INICIALIZAR_RAIZ:
	CLR INIT_CUADRADO_4toBYTE
	CLR INIT_CUADRADO_3erBYTE
	LDI INIT_CUADRADO_2doBYTE,0xFF
	LDI INIT_CUADRADO_1erBYTE,0xFF
VER_4toBYTE:
	CLR TEMP
	CP CUADRADO_4toBYTE,TEMP
	BRNE VER_3erBYTE
	ANDI INIT_CUADRADO_2doBYTE,0xF0
VER_3erBYTE:	
	CP CUADRADO_3erBYTE,TEMP
	BRNE VER_2doBYTE
	ANDI INIT_CUADRADO_2doBYTE,0x0F
VER_2doBYTE:	
	CP CUADRADO_2doBYTE,TEMP
	BRNE VER_1erBYTE
	ANDI INIT_CUADRADO_1erBYTE,0xF0
VER_1erBYTE:	
	CP CUADRADO_1erBYTE,TEMP
	BRNE ITERACION_RAIZ
	ANDI INIT_CUADRADO_1erBYTE,0x0F
;[FIN]INICIALIZO LA RAIZ SEGUN EL TAMAÑO DEL CUADRADO

ITERACION_RAIZ:
	CALL RAIZ_NR
	DEC CONT_ITERACIONES
	BRNE ITERACION_RAIZ
RET

RAIZ_NR:
	;a
	MOVW DIVID_3:DIVID_4,CUADRADO_3erBYTE:CUADRADO_4toBYTE
	MOVW DIVID_1:DIVID_2,CUADRADO_1erBYTE:CUADRADO_2doBYTE
	;[FIN]a
	;X(k)
	MOVW DIVIS_3:DIVIS_4,INIT_CUADRADO_3erBYTE:INIT_CUADRADO_4toBYTE
	MOVW DIVIS_1:DIVIS_2,INIT_CUADRADO_1erBYTE:INIT_CUADRADO_2doBYTE
	;[FIN]X(k)
	CALL DIVISION;a/X(k)
	;X(k) + a/X(k)
	ADD INIT_CUADRADO_1erBYTE,RESUL_1
	ADC INIT_CUADRADO_2doBYTE,RESUL_2
	ADC INIT_CUADRADO_3erBYTE,RESUL_3
	ADC INIT_CUADRADO_4toBYTE,RESUL_4
	;[FIN]X(k) + a/X(k)
	;(X(k) + a/X(k))/2
	LSR INIT_CUADRADO_4toBYTE
	ROR INIT_CUADRADO_3erBYTE
	ROR INIT_CUADRADO_2doBYTE
	ROR INIT_CUADRADO_1erBYTE
	;[FIN](X(k) + a/X(k))/2
RET

DIVISION:
;LIMPIAR RESTO
	CLR	RESTO_4
	CLR	RESTO_3
	CLR	RESTO_2
	SUB	RESTO_1,RESTO_1
;LIMPIAR RESTO
	LDI TEMP,33;COMENZAR LOOP CONTADOR QUE VA A HACER TANTOS ROLIDOS COMO DIGITOS HAYA
	MOV	CONT_RL,TEMP;COMENZAR LOOP CONTADOR QUE VA A HACER TANTOS ROLIDOS COMO DIGITOS HAYA

ROL_DIVIDENDO:
;SHIFTEAR DIVIDENDO
	ROL	DIVID_1
	ROL	DIVID_2
	ROL	DIVID_3
	ROL	DIVID_4
;[FIN]SHIFTEAR DIVIDENDO

	DEC CONT_RL;DECREMENTAR CONTADOR DE SHIFTEOS
	BRNE ROL_RESTO;SI NO SE HICIERON TODOS LOS ROLIDOS, SE PROCEDE A CONTINUAR LA DIVISION
	RJMP REDONDEO;SI SE HICIERON TODOS LOS ROLIDOS, SE DA POR TERMINADA LA DIVISION

ROL_RESTO:
;SHIFTEAR RESTO
	ROL	RESTO_1
	ROL	RESTO_2
	ROL	RESTO_3
	ROL	RESTO_4
;[FIN]SHIFTEAR RESTO

;RESTO = RESTO - DIVISOR
	SUB	RESTO_1,DIVIS_1
	SBC	RESTO_2,DIVIS_2
	SBC	RESTO_3,DIVIS_3
	SBC	RESTO_4,DIVIS_4
;RESTO = RESTO - DIVISOR

	BRCC INC_RES;SI EL DIVISOR ES MENOR AL RESTO, SE MANTIENE EL RESTO COMO ESTABA Y SE INCREMENTA EL RESULTADO

;SI EL DIVISOR ES MAYOR AL RESTO, SE LO RESTITUYE A COMO ESTABA ANTES DE LA RESTA
	ADD	RESTO_1,DIVIS_1
	ADC	RESTO_2,DIVIS_2
	ADC	RESTO_3,DIVIS_3
	ADC	RESTO_4,DIVIS_4
	CLC;TAMBIEN SE RESTITUYE EL CARRY
;SI EL DIVISOR ES MAYOR AL RESTO, SE LO RESTITUYE A COMO ESTABA ANTES DE LA RESTA
	RJMP ROL_DIVIDENDO;SE VUELVE A ARRANCAR EL ROLIDO DEL DIVIDENDO

INC_RES:
	SEC;SE PRENDE EL CARRY PARA SER INCLUIDO EN EL RESULTADO
	RJMP ROL_DIVIDENDO;SE VUELVE A ARRANCAR EL ROLIDO DEL DIVIDENDO

REDONDEO:
	LSR DIVIS_4
	ROR DIVIS_3
	ROR DIVIS_2
	ROR DIVIS_1
	SUB DIVIS_4,RESTO_4
	BRCS SUM_1
	BRNE RETIRADA
	SUB DIVIS_3,RESTO_3
	BRCS SUM_1
	BRNE RETIRADA
	SUB DIVIS_2,RESTO_2
	BRCS SUM_1
	BRNE RETIRADA
	SUB DIVIS_1,RESTO_1
	BRSH RETIRADA
SUM_1:
	LDI TEMP,1
	ADD DIVID_1,TEMP
	CLR TEMP
	ADC DIVID_2,TEMP
	ADC DIVID_3,TEMP
	ADC DIVID_4,TEMP
RETIRADA: RET
